#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API
"""

import psycopg2
import requests
import json

def create_cards_table():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = psycopg2.connect(
            host='localhost',
            database='isramat_bot',
            user='postgres',
            password='postgres'
        )
        
        print('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ')
        
        # –ß–∏—Ç–∞–µ–º SQL —Å–∫—Ä–∏–ø—Ç
        with open('create_cards_table.sql', 'r', encoding='utf-8') as f:
            sql_script = f.read()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç
        cursor = conn.cursor()
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        commands = sql_script.split(';')
        for cmd in commands:
            cmd = cmd.strip()
            if cmd and not cmd.startswith('--') and not cmd.startswith('SELECT'):
                print(f"–í—ã–ø–æ–ª–Ω—è—é: {cmd[:50]}...")
                try:
                    cursor.execute(cmd)
                except Exception as cmd_error:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ: {cmd_error}")
                    print(f"–ö–æ–º–∞–Ω–¥–∞: {cmd}")
                    raise
        
        conn.commit()
        print('‚úÖ SQL —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cursor.execute('SELECT COUNT(*) FROM cards')
        total_cards = cursor.fetchone()[0]
        print(f'üìä –°–æ–∑–¥–∞–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {total_cards}')
        
        cursor.execute('SELECT COUNT(DISTINCT machine_id) FROM cards')
        machines_count = cursor.fetchone()[0]
        print(f'üè≠ –°—Ç–∞–Ω–∫–æ–≤ —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏: {machines_count}')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞–Ω–∫–∞–º
        cursor.execute("""
            SELECT 
                m.name as machine_name,
                COUNT(c.card_number) as cards_count
            FROM machines m
            LEFT JOIN cards c ON m.id = c.machine_id
            WHERE m.is_active = true
            GROUP BY m.id, m.name
            ORDER BY m.name
            LIMIT 5
        """)
        
        print('\nüìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞–Ω–∫–∞–º (–ø–µ—Ä–≤—ã–µ 5):')
        for row in cursor.fetchall():
            print(f"  {row[0]}: {row[1]} –∫–∞—Ä—Ç–æ—á–µ–∫")
        
        cursor.close()
        conn.close()
        return True
        
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}')
        return False

def test_api_endpoints():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∫–∞—Ä—Ç–æ—á–µ–∫"""
    base_url = "http://localhost:8000"
    
    print('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...')
    
    try:
        # 1. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
        print('\n1. –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /cards/free')
        response = requests.get(f"{base_url}/cards/free?machine_id=1")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –°–≤–æ–±–æ–¥–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —Å—Ç–∞–Ω–∫–∞ 1: {data['cards'][:5]}...")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code} - {response.text}")
        
        # 2. –¢–µ—Å—Ç –≥–∏–±–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
        print('\n2. –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /cards/{card_id}/machine/{machine_code}')
        response = requests.get(f"{base_url}/cards/1/machine/1")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: {data['machine_name']}, —Å—Ç–∞—Ç—É—Å: {data['status']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code} - {response.text}")
        
        print('\n‚úÖ –ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
        
    except requests.exceptions.ConnectionError:
        print('‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ FastAPI —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8000')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: {e}')

if __name__ == "__main__":
    print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∏ –¥–∞–Ω–Ω—ã–µ
    if create_cards_table():
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
        test_api_endpoints()
        
        print("\n" + "=" * 50)
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç—å FastAPI —Å–µ—Ä–≤–µ—Ä: uvicorn src.main:app --reload --port 8000")
        print("2. –û–±–Ω–æ–≤–∏—Ç—å Telegram-–±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏")
        print("3. –°–æ–∑–¥–∞—Ç—å Dashboard –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏")
        print("4. –ù–∞–ø–µ—á–∞—Ç–∞—Ç—å –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏")
    else:
        print("\n‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫") 