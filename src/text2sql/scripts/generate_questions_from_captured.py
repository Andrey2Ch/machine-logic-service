#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ captured SQL queries.
–ß–∏—Ç–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –∏–∑ text2sql_captured, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ë–î.
"""

import os
import sys
import logging
import psycopg2
import psycopg2.extras
from typing import Optional
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
project_root = os.path.join(os.path.dirname(__file__), '..', '..', '..')
sys.path.insert(0, project_root)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
import re

def _detect_kind(sql: str) -> str:
    s = sql.strip().lower()
    if s.startswith("insert"):
        return "insert"
    elif s.startswith("update"):
        return "update"
    elif s.startswith("delete"):
        return "delete"
    elif s.startswith("merge"):
        return "merge"
    return "select"


def _dml_question(sql: str, kind: str) -> tuple[str, list[str]]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è DML-–∑–∞–ø—Ä–æ—Å–æ–≤."""
    hints = [f"DML: {kind.upper()}"]
    
    if kind == "insert":
        m_table = re.search(r"insert\s+into\s+(\w+)", sql)
        table = m_table.group(1) if m_table else "—Ç–∞–±–ª–∏—Ü—É"
        return (f"–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å–∏ –≤ {table}?", hints)
    
    elif kind == "update":
        m_table = re.search(r"update\s+(\w+)", sql)
        table = m_table.group(1) if m_table else "—Ç–∞–±–ª–∏—Ü—É"
        
        m_set = re.search(r"set\s+(.+?)(\s+where|$)", sql)
        if m_set:
            set_expr = m_set.group(1).strip()
            cols = re.findall(r"(\w+)\s*=", set_expr)
            if cols:
                cols_text = ", ".join(cols[:3]) + (" –∏ –¥—Ä." if len(cols) > 3 else "")
                hints.append(f"SET: {cols_text}")
        
        m_where = re.search(r"where\s+(.+)$", sql)
        if m_where:
            where_expr = m_where.group(1).strip()
            conds = []
            for match in re.finditer(r"(\w+)\s*=\s*%\([^)]+\)s", where_expr):
                conds.append(f"{match.group(1)} = <–∑–Ω–∞—á–µ–Ω–∏–µ>")
            if conds:
                hints.append(f"WHERE: {'; '.join(conds[:2])}")
        
        return (f"–û–±–Ω–æ–≤–∏—Ç—å {table}?", hints)
    
    elif kind == "delete":
        m_table = re.search(r"delete\s+from\s+(\w+)", sql)
        table = m_table.group(1) if m_table else "—Ç–∞–±–ª–∏—Ü—ã"
        return (f"–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å–∏ –∏–∑ {table}?", hints)
    
    else:
        return ("–ß—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç DML-–∑–∞–ø—Ä–æ—Å?", hints)


def _ru_from_sql(sql: str) -> tuple[str, list[str]]:
    """–û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–π —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–∑ SQL."""
    hints: list[str] = []
    s = re.sub(r"\s+", " ", sql.strip(), flags=re.MULTILINE)
    low = s.lower()

    kind = _detect_kind(low)
    if kind != "select":
        return _dml_question(low, kind) 

    # SELECT list
    m_select = re.search(r"select (.+?) from ", low)
    select_expr = (m_select.group(1).strip() if m_select else "*")
    agg = None
    if re.search(r"\bcount\s*\(", select_expr):
        agg = "count"
    elif re.search(r"\bsum\s*\(", select_expr):
        agg = "sum"
    elif re.search(r"\bavg\s*\(", select_expr):
        agg = "avg"
    elif re.search(r"\bmin\s*\(", select_expr):
        agg = "min"
    elif re.search(r"\bmax\s*\(", select_expr):
        agg = "max"

    if agg == "count":
        base_q = "–°–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π?"
    elif agg == "sum":
        base_q = "–ö–∞–∫–æ–≤–∞ —Å—É–º–º–∞?"
    elif agg == "avg":
        base_q = "–ö–∞–∫–æ–≤–æ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ?"
    elif agg == "min":
        base_q = "–ö–∞–∫–æ–≤–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ?"
    elif agg == "max":
        base_q = "–ö–∞–∫–æ–≤–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ?"
    else:
        base_q = "–ü–æ–∫–∞–∂–∏"

    # FROM target(s)
    m_from = re.search(r" from (.+?)( where | group by | order by | limit |$)", low)
    from_expr = (m_from.group(1).strip() if m_from else "—Ç–∞–±–ª–∏—Ü")
    from_expr = re.sub(r"\s+join\s+", ", ", from_expr)
    hints.append(f"FROM: {from_expr}")

    # WHERE filters
    m_where = re.search(r" where (.+?)( group by | order by | limit |$)", low)
    filters = m_where.group(1).strip() if m_where else ""
    filt_pretty = ""
    if filters:
        conds: list[str] = []
        for match in re.finditer(r"(\b[a-z_][a-z0-9_]*\b)\s*=\s*%\([^)]+\)s", filters):
            col = match.group(1)
            conds.append(f"{col} = <–∑–Ω–∞—á–µ–Ω–∏–µ>")
        for match in re.finditer(r"(\b[a-z_][a-z0-9_]*\b)\s+is\s+(not\s+)?null", filters):
            col = match.group(1)
            not_kw = match.group(2)
            conds.append(f"{col} {'–Ω–µ ' if not_kw else ''}–ø—É—Å—Ç–æ")
        for col in re.findall(r"(\b[a-z_][a-z0-9_]*\b)\s+in\s*\(", filters):
            conds.append(f"{col} –≤ —Å–ø–∏—Å–∫–µ")
        if not conds:
            filt_pretty = re.sub(r"\s+and\s+", "; ", filters)
            filt_pretty = re.sub(r"\s+or\s+", "; ", filt_pretty)
        else:
            filt_pretty = "; ".join(conds)
        if filt_pretty:
            hints.append(f"–§–∏–ª—å—Ç—Ä: {filt_pretty}")

    # GROUP BY
    if re.search(r" group by ", low):
        hints.append("–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞: –µ—Å—Ç—å GROUP BY")

    # ORDER/LIMIT ‚Üí –¢–û–ü-N
    m_limit = re.search(r" limit\s+(\d+)", low)
    if m_limit:
        n = m_limit.group(1)
        hints.append(f"LIMIT: {n}")
        if re.search(r" order by ", low):
            base_q = f"–¢–æ–ø-{n}: {base_q[0].lower() + base_q[1:]}"

    # –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
    cols_text = "–≤—Å–µ –ø–æ–ª—è"
    if select_expr != "*":
        raw_cols = [c.strip() for c in select_expr.split(',')]
        cols = []
        for c in raw_cols[:6]:
            m_as = re.search(r"\bas\s+([a-z_][a-z0-9_]*)", c)
            if m_as:
                cols.append(m_as.group(1))
            else:
                cols.append(c.split('.')[-1])
        if cols:
            cols_text = ", ".join(cols[:4]) + (" –∏ –¥—Ä." if len(cols) > 4 else "")

    # –ò—Ç–æ–≥–æ–≤–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞
    from_short = from_expr.split(',')[0].strip()
    where_part = f" (–≥–¥–µ {filt_pretty})" if filt_pretty else ""
    lim_part = f" (—Ç–æ–ø-{m_limit.group(1)})" if m_limit else ""
    if agg:
        question = f"{base_q} –∏–∑ {from_short}{where_part}{lim_part}"
    else:
        question = f"{base_q} –∏–∑ {from_short} –ø–æ–ª—è {cols_text}{where_part}{lim_part}"
    question = re.sub(r"\s+", " ", question).strip()
    return (question, hints)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def get_db_connection():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL."""
    try:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å DATABASE_URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        database_url = os.getenv('DATABASE_URL')
        if database_url:
            return psycopg2.connect(database_url)
        
        # Railway URL pattern
        railway_url = "postgresql://postgres:XWQcfSsWzPCJYUJKGOFSgBxOKyEYMXYI@junction.proxy.rlwy.net:24086/railway"
        logger.info("üì° –ò—Å–ø–æ–ª—å–∑—É–µ–º Railway PostgreSQL")
        return psycopg2.connect(railway_url)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        raise


def fetch_queries_without_questions(conn, limit: int = 100):
    """–ü–æ–ª—É—á–∏—Ç—å SQL-–∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤."""
    with conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor) as cur:
        cur.execute("""
            SELECT id, sql, route, role, duration_ms, captured_at
            FROM text2sql_captured 
            WHERE question_ru IS NULL 
               OR question_ru = ''
            ORDER BY captured_at DESC
            LIMIT %s
        """, (limit,))
        return cur.fetchall()


def update_question(conn, record_id: int, question_ru: str, hints: list[str]):
    """–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–º."""
    with conn.cursor() as cur:
        cur.execute("""
            UPDATE text2sql_captured 
            SET question_ru = %s, 
                question_hints = %s,
                question_generated_at = NOW()
            WHERE id = %s
        """, (question_ru, psycopg2.extras.Json(hints), record_id))


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ captured SQL queries")
    
    try:
        conn = get_db_connection()
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
        with conn.cursor() as cur:
            cur.execute("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'text2sql_captured' 
                  AND column_name IN ('question_ru', 'question_hints', 'question_generated_at')
            """)
            existing_cols = [row[0] for row in cur.fetchall()]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            if 'question_ru' not in existing_cols:
                logger.info("‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É question_ru")
                cur.execute("ALTER TABLE text2sql_captured ADD COLUMN question_ru TEXT")
            
            if 'question_hints' not in existing_cols:
                logger.info("‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É question_hints")
                cur.execute("ALTER TABLE text2sql_captured ADD COLUMN question_hints JSONB")
                
            if 'question_generated_at' not in existing_cols:
                logger.info("‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É question_generated_at")
                cur.execute("ALTER TABLE text2sql_captured ADD COLUMN question_generated_at TIMESTAMP")
            
            conn.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –±–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤
        with conn.cursor() as cur:
            cur.execute("""
                SELECT COUNT(*) 
                FROM text2sql_captured 
                WHERE question_ru IS NULL OR question_ru = ''
            """)
            total_count = cur.fetchone()[0]
            logger.info(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –±–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_count}")
        
        if total_count == 0:
            logger.info("‚ú® –í—Å–µ –∑–∞–ø–∏—Å–∏ —É–∂–µ –∏–º–µ—é—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã!")
            return
        
        processed = 0
        errors = 0
        batch_size = 100
        
        while processed < total_count:
            # –ü–æ–ª—É—á–∞–µ–º –æ—á–µ—Ä–µ–¥–Ω—É—é –ø–æ—Ä—Ü–∏—é –∑–∞–ø–∏—Å–µ–π
            records = fetch_queries_without_questions(conn, batch_size)
            if not records:
                break
                
            logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Ä—Ü–∏—é: {len(records)} –∑–∞–ø–∏—Å–µ–π")
            
            for record in records:
                try:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å
                    question_ru, hints = _ru_from_sql(record['sql'])
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
                    update_question(conn, record['id'], question_ru, hints)
                    processed += 1
                    
                    if processed % 50 == 0:
                        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}/{total_count}")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ {record['id']}: {e}")
                    errors += 1
                    continue
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø–æ—Ä—Ü–∏–∏
            conn.commit()
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø–æ—Ä—Ü–∏—è. –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}")
        
        logger.info(f"üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}")
        logger.info(f"‚ùå –û—à–∏–±–æ–∫: {errors}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        with conn.cursor() as cur:
            cur.execute("""
                SELECT 
                    COUNT(*) as total,
                    COUNT(question_ru) as with_questions,
                    COUNT(*) - COUNT(question_ru) as without_questions
                FROM text2sql_captured
            """)
            stats = cur.fetchone()
            logger.info(f"üìà –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            logger.info(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {stats[0]}")
            logger.info(f"   –° –≤–æ–ø—Ä–æ—Å–∞–º–∏: {stats[1]}")
            logger.info(f"   –ë–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤: {stats[2]}")
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
    finally:
        if 'conn' in locals():
            conn.close()
            logger.info("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")


if __name__ == "__main__":
    main()
